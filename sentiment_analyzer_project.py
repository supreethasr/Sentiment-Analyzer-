# -*- coding: utf-8 -*-
"""Sentiment Analyzer Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xuSlWC4zWsbHAKIf7-IJ8sYl_-mm-GuW
"""

import pandas as pd
import numpy as np

""" Load the dataset into a Dataframe

"""

df = pd.read_csv("/content/Emotion_final.csv")

df.head()

original_size = df.shape[0]
print(original_size)

"""Perform the data cleaning

"""

df.isnull().sum()

df.dtypes

df.describe()

df.info()

df.duplicated().sum()

df.drop_duplicates()

df['Text'] = df['Text'].str.strip().str.lower()
print(df['Text'])

print(df.head())

df = df.drop_duplicates(subset=['Text', 'Emotion'])
df.duplicated().sum()

df.head()

cleaned_size = df.shape[0]
print("\nChecking for duplicates after removal:")
print(f"Number of duplicate rows after removal: {df.duplicated().sum()}")
print(f"Original dataset size: {original_size}")
print(f"Cleaned dataset size: {cleaned_size}")

""" Label encode the Emotion column"""

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
df['Emotion'] = label_encoder.fit_transform(df['Emotion'])
print(df['Emotion'])

print("\nUnique labels after encoding:")
print(df['Emotion'].unique())

"""Train a random forest model with the dataset

"""

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score


X_train, X_test, y_train, y_test = train_test_split(df['Text'], df['Emotion'], test_size=0.2, random_state=42)
print("X_train:")
print(X_train)
print("\nX_test:")
print(X_test)
print("\ny_train:")
print(y_train)
print("\ny_test:")
print(y_test)

vectorizer = TfidfVectorizer(max_features=5000)
X_train_vect = vectorizer.fit_transform(X_train)
X_test_vect = vectorizer.transform(X_test)
print(X_train_vect)
print(X_test_vect)

clf = RandomForestClassifier(n_estimators=100, random_state=42)
print(clf.fit(X_train_vect, y_train))

""" Find the accuracy of the model

"""

y_pred = clf.predict(X_test_vect)
accuracy = accuracy_score(y_test, y_pred)

print(f'\nAccuracy of the Random Forest model: {accuracy * 100:.2f}%')